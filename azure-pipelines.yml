# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java
name: 'CI: Build and Push'
variables:
  dev_tag: $[format('dev-{0:yyyyMMddHHmmss}', pipeline.startTime)]
  test_tag: $[format('test-{0:yyyyMMddHHmmss}', pipeline.startTime)]
  prod_tag: $[format('prod-{0:yyyyMMddHHmmss}', pipeline.startTime)]

parameters:
  - name: buildConfig
    displayName: Build Configuration
    type: string
    default: Release
    values:
    - Release
    - Debug

trigger:
- master

pool:
  vmImage: ubuntu-latest

steps:
- checkout: self
  persistCredentials: 'true'

- task: Gradle@2
  displayName: Compile and build WAR file
  inputs:
    workingDirectory: ''
    gradleWrapperFile: 'gradlew'
    gradleOptions: '-Xmx1024m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.11'
    jdkArchitectureOption: 'x64'
    tasks: 'war'

- task: Gradle@2
  displayName: Run tests
  inputs:
    workingDirectory: ''
    gradleWrapperFile: 'gradlew'
    gradleOptions: '-Xmx1024m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.11'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml'
    tasks: 'test'

- task: Docker@2
  displayName: Login into quay.io
  inputs:
    containerRegistry: 'Quay.io'
    command: 'login'

- task: Docker@2
  displayName: Build container image
  inputs:
    containerRegistry: 'Quay.io'
    repository: '$(REGISTRY_REPO)/$(PRODUCED_CONTAINER_IMAGE_NAME)'
    command: 'build'
    Dockerfile: 'src/main/docker/Dockerfile'
    buildContext: '.'
    tags: |
      latest
      $(Build.BuildId)-$(Build.SourceVersion)

# - task: BuildpacksInstaller@1
#   displayName: Install Buildpacks CLI
#   inputs:
#     buildpacksVersion: '0.29.0'

# - task: Bash@3
#   displayName: Build the OCI with Buildpacks
#   inputs:
#     targetType: 'inline'
#     script: |
#       echo "using pack version $(pack version)"
#       echo "building $(PRODUCED_CONTAINER_IMAGE_NAME) image using Buildpacks CLI"
#       pack build $(PRODUCED_CONTAINER_IMAGE_NAME) \
#       --builder gcr.io/paketo-buildpacks/builder:base \
#       --buildpack paketo-buildpacks/eclipse-openj9 \
#       --buildpack paketo-buildpacks/java \
#       --env BP_JAVA_APP_SERVER=liberty \
#       --env BP_LIBERTY_INSTALL_TYPE=ol \
#       --env BP_LIBERTY_PROFILE=microProfile6 \
#       --env BP_GRADLE_BUILD_ARGUMENTS="--no-daemon war" \
#       --env BP_GRADLE_ADDITIONAL_BUILD_ARGUMENTS="--full-stacktrace" \
#       --env BP_GRADLE_BUILT_ARTIFACT="build/libs/*.war src/main/liberty/config/*" \
#       --tag "quay.io/$(REGISTRY_REPO)/$(PRODUCED_CONTAINER_IMAGE_NAME):latest" \
#       --tag "quay.io/$(REGISTRY_REPO)/$(PRODUCED_CONTAINER_IMAGE_NAME):$(Build.BuildId)-$(Build.SourceVersion)" \
#       --pull-policy if-not-present

# - task: BuildpacksTask@1
#   displayName: Build the OCI with Buildpacks
#   inputs:
#     command: 'build'
#     builder: 'gcr.io/paketo-buildpacks/builder:base'
#     imageName: 'quay.io/$(REGISTRY_REPO)/$(PRODUCED_CONTAINER_IMAGE_NAME)'
#     buildpacks: |
#       paketo-buildpacks/eclipse-openj9
#       paketo-buildpacks/java
#     projectPath: './'
#     envVariables: |
#       BP_JAVA_APP_SERVER=liberty
#       BP_LIBERTY_PROFILE=microProfile6
#       BP_GRADLE_BUILD_ARGUMENTS=--no-daemon war
#       BP_GRADLE_ADDITIONAL_BUILD_ARGUMENTS=--full-stacktrace
#       BP_GRADLE_BUILT_ARTIFACT=build/libs/*.war src/main/liberty/config/*
#     pullPolicy: 'if-not-present'

- task: Docker@2
  displayName: Push image to Registry
  inputs:
    containerRegistry: 'Quay.io'
    repository: '$(REGISTRY_REPO)/$(PRODUCED_CONTAINER_IMAGE_NAME)'
    command: 'push'
    tags: |
      $(Build.BuildId)-$(Build.SourceVersion)
      latest

- task: Bash@3
  displayName: Update Gitops manifests
  inputs:
    targetType: 'inline'
    script: |
      # pwd
      # ls -la .
      echo "Cloning app manifests from $(GITOPS_REPO)"
      git clone $(GITOPS_REPO) /tmp/gitops-repo
      cd /tmp/gitops-repo
      # ls -la .
      export IMAGE_NAME="quay.io/$(REGISTRY_REPO)/$(PRODUCED_CONTAINER_IMAGE_NAME):$(Build.BuildId)-$(Build.SourceVersion)"
      export REPLICA_COUNT=1
      echo "updating 'OpenlibertyApplication' CR patch file (at dev env) to use the image tag [ ${IMAGE_NAME} ]"
      ./.local/bin/mo ./config/overlays/dev/ol-app-patch.yaml.mo >| ./config/overlays/dev/ol-app-patch.yaml
      cat ./config/overlays/dev/ol-app-patch.yaml
      echo "setup local agent git"
      git config --global user.email "rafaelcba@gmail.com"
      git config --global user.name "Azure DevOps Pipeline $(Build.BuildId)" 
      git add .
      git commit -m "Pipeline $(Build.BuildId): updating image tag for dev environment"
      git push https://$(GITHUB_PAT)@github.com/$(GITHUB_USERNAME)/$(GITHUB_REPO_NAME).git

      